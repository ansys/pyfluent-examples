
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/00-released_examples/01-brake.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_00-released_examples_01-brake.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_00-released_examples_01-brake.py:


#################################
Automotive Brake Thermal Analysis
#################################

Objective:
==========

Braking surfaces get heated due to frictional heating during braking.
High temperature affects the braking performance and life of the braking system.
This example demonstrates:

* Fluent setup and simulation using PyFluent
* Post processing using PyVista (3D Viewer) and Matplotlib (2D graphs)

.. GENERATED FROM PYTHON SOURCE LINES 19-21

Import required libraries/modules
==================================================================================

.. GENERATED FROM PYTHON SOURCE LINES 21-28

.. code-block:: default


    import csv
    from pathlib import Path

    import ansys.fluent.core as pyfluent
    from ansys.fluent.core import examples


.. GENERATED FROM PYTHON SOURCE LINES 29-31

PyVista
--------------------

.. GENERATED FROM PYTHON SOURCE LINES 31-33

.. code-block:: default

    import ansys.fluent.visualization.pyvista as pv


.. GENERATED FROM PYTHON SOURCE LINES 34-36

Matplotlib
--------------------

.. GENERATED FROM PYTHON SOURCE LINES 36-38

.. code-block:: default

    import matplotlib.pyplot as plt


.. GENERATED FROM PYTHON SOURCE LINES 39-44

Specifying save path
====================
save_path can be specified as Path("E:/", "pyfluent-examples-tests") or
Path("E:/pyfluent-examples-tests") in a Windows machine for example,  or
Path("~/pyfluent-examples-tests") in Linux.

.. GENERATED FROM PYTHON SOURCE LINES 44-52

.. code-block:: default

    save_path = Path(pyfluent.EXAMPLES_PATH)

    import_filename = examples.download_file(
        "brake.msh",
        "pyfluent/examples/Brake-Thermal-PyVista-Matplotlib",
        save_path=save_path,
    )


.. GENERATED FROM PYTHON SOURCE LINES 53-55

Fluent Solution Setup
==================================================================================

.. GENERATED FROM PYTHON SOURCE LINES 57-59

Launch Fluent session with solver mode
--------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 59-65

.. code-block:: default


    session = pyfluent.launch_fluent(
        mode="solver", show_gui=False, version="3ddp", precision="double", processor_count=2
    )
    session.check_health()


.. GENERATED FROM PYTHON SOURCE LINES 66-68

Import mesh
------------

.. GENERATED FROM PYTHON SOURCE LINES 68-71

.. code-block:: default


    session.tui.file.read_case(import_filename)


.. GENERATED FROM PYTHON SOURCE LINES 72-74

Define models and material
--------------------------

.. GENERATED FROM PYTHON SOURCE LINES 74-78

.. code-block:: default

    session.tui.define.models.energy("yes", "no", "no", "no", "yes")
    session.tui.define.models.unsteady_2nd_order_bounded("Yes")
    session.tui.define.materials.copy("solid", "steel")


.. GENERATED FROM PYTHON SOURCE LINES 79-81

Solve only energy equation (conduction)
---------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 81-83

.. code-block:: default

    session.tui.solve.set.equations("flow", "no", "kw", "no")


.. GENERATED FROM PYTHON SOURCE LINES 84-88

Define disc rotation
--------------------
(15.79 rps corresponds to 100 km/h car speed
with 0.28 m of axis height from ground)

.. GENERATED FROM PYTHON SOURCE LINES 88-118

.. code-block:: default

    session.tui.define.boundary_conditions.set.solid(
        "disc1",
        "disc2",
        "()",
        "solid-motion?",
        "yes",
        "solid-omega",
        "no",
        -15.79,
        "solid-x-origin",
        "no",
        -0.035,
        "solid-y-origin",
        "no",
        -0.821,
        "solid-z-origin",
        "no",
        0.045,
        "solid-ai",
        "no",
        0,
        "solid-aj",
        "no",
        1,
        "solid-ak",
        "no",
        0,
        "q",
    )


.. GENERATED FROM PYTHON SOURCE LINES 119-123

Apply frictional heating on pad-disc surfaces
----------------------------------------------
Wall thickness 0f 2 mm has been assumed and 2e9 w/m3 is the heat generation which
has been calculated from kinetic energy change due to braking.

.. GENERATED FROM PYTHON SOURCE LINES 123-136

.. code-block:: default


    session.tui.define.boundary_conditions.set.wall(
        "wall_pad-disc1",
        "wall-pad-disc2",
        "()",
        "wall-thickness",
        0.002,
        "q-dot",
        "no",
        2e9,
        "q",
    )


.. GENERATED FROM PYTHON SOURCE LINES 137-141

Apply convection cooling on outer surfaces due to air flow
-----------------------------------------------------------
Outer surfaces are applied a constant htc of 100 W/(m2 K)
and 300 K free stream temperature

.. GENERATED FROM PYTHON SOURCE LINES 141-155

.. code-block:: default


    session.tui.define.boundary_conditions.set.wall(
        "wall-disc*",
        "wall-geom*",
        "()",
        "thermal-bc",
        "yes",
        "convection",
        "convective-heat-transfer-coefficient",
        "no",
        100,
        "q",
    )


.. GENERATED FROM PYTHON SOURCE LINES 156-159

Initialize
----------
Initialize with 300 K temperature

.. GENERATED FROM PYTHON SOURCE LINES 159-162

.. code-block:: default


    session.tui.solve.initialize.initialize_flow()


.. GENERATED FROM PYTHON SOURCE LINES 163-169

Post processing setup
---------------------
* Report definitions and monitor plots
* Set contour plot properties
* Set views and camera
* Set animation object

.. GENERATED FROM PYTHON SOURCE LINES 169-278

.. code-block:: default


    session.tui.solve.report_definitions.add(
        "max-pad-temperature",
        "volume-max",
        "field",
        "temperature",
        "zone-names",
        "geom-1-innerpad",
        "geom-1-outerpad",
    )
    session.tui.solve.report_definitions.add(
        "max-disc-temperature",
        "volume-max",
        "field",
        "temperature",
        "zone-names",
        "disc1",
        "disc2",
    )

    session.tui.solve.report_plots.add(
        "max-temperature",
        "report-defs",
        "max-pad-temperature",
        "max-disc-temperature",
        "()",
    )

    report_file_path = Path(save_path) / "max-temperature.out"
    session.tui.solve.report_files.add(
        "max-temperature",
        "report-defs",
        "max-pad-temperature",
        "max-disc-temperature",
        "()",
        "file-name",
        str(report_file_path),
    )


    session.results.graphics.contour["contour-1"] = {
        "boundary_values": True,
        "color_map": {
            "color": "field-velocity",
            "font_automatic": True,
            "font_name": "Helvetica",
            "font_size": 0.032,
            "format": "%0.2e",
            "length": 0.54,
            "log_scale": False,
            "position": 1,
            "show_all": True,
            "size": 100,
            "user_skip": 9,
            "visible": True,
            "width": 6.0,
        },
        "coloring": {"smooth": False},
        "contour_lines": False,
        "display_state_name": "None",
        "draw_mesh": False,
        "field": "temperature",
        "filled": True,
        "mesh_object": "",
        "node_values": True,
        "range_option": {"auto_range_on": {"global_range": True}},
    }


    session.tui.display.objects.create(
        "contour",
        "temperature",
        "field",
        "temperature",
        "surface-list",
        "wall*",
        "()",
        "color-map",
        "format",
        "%0.1f",
        "q",
        "range-option",
        "auto-range-off",
        "minimum",
        300,
        "maximum",
        400,
        "q",
        "q",
    )


    session.tui.display.views.restore_view("top")
    session.tui.display.views.camera.zoom_camera(2)
    session.tui.display.views.save_view("animation-view")

    session.tui.solve.animate.objects.create(
        "animate-temperature",
        "animate-on",
        "temperature",
        "frequency-of",
        "flow-time",
        "flow-time-frequency",
        0.05,
        "view",
        "animation-view",
        "q",
    )


.. GENERATED FROM PYTHON SOURCE LINES 279-284

Run simulation
---------------
* Run simulation for 2 seconds flow time
* Set time step size
* Set number of time steps and maximum number of iterations per time step

.. GENERATED FROM PYTHON SOURCE LINES 284-288

.. code-block:: default


    session.tui.solve.set.transient_controls.time_step_size(0.01)
    session.tui.solve.dual_time_iterate(200, 5)


.. GENERATED FROM PYTHON SOURCE LINES 289-292

Save simulation data
--------------------
Write case and data files

.. GENERATED FROM PYTHON SOURCE LINES 292-295

.. code-block:: default

    save_case_data_as = Path(save_path) / "brake-final.cas.h5"
    session.tui.file.write_case_data(save_case_data_as)


.. GENERATED FROM PYTHON SOURCE LINES 296-298

Post processing with PyVista (3D visualization)
===============================================

.. GENERATED FROM PYTHON SOURCE LINES 300-302

Create a graphics session
-------------------------

.. GENERATED FROM PYTHON SOURCE LINES 302-304

.. code-block:: default

    graphics_session1 = pv.Graphics(session)


.. GENERATED FROM PYTHON SOURCE LINES 305-307

Temperature contour object
--------------------------

.. GENERATED FROM PYTHON SOURCE LINES 307-309

.. code-block:: default

    contour1 = graphics_session1.Contours["temperature"]


.. GENERATED FROM PYTHON SOURCE LINES 310-312

Check available options for contour object
-------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 312-315

.. code-block:: default


    contour1()


.. GENERATED FROM PYTHON SOURCE LINES 316-318

Set contour properties
----------------------

.. GENERATED FROM PYTHON SOURCE LINES 318-335

.. code-block:: default


    contour1.field = "temperature"
    contour1.surfaces_list = [
        "wall-disc1",
        "wall-disc2",
        "wall-pad-disc2",
        "wall_pad-disc1",
        "wall-geom-1-bp_inner",
        "wall-geom-1-bp_outer",
        "wall-geom-1-innerpad",
        "wall-geom-1-outerpad",
    ]
    contour1.range.option = "auto-range-off"
    contour1()
    contour1.range.auto_range_off.minimum = 300
    contour1.range.auto_range_off.maximum = 400


.. GENERATED FROM PYTHON SOURCE LINES 336-338

Display contour
---------------

.. GENERATED FROM PYTHON SOURCE LINES 338-341

.. code-block:: default


    contour1.display()


.. GENERATED FROM PYTHON SOURCE LINES 342-345

.. image:: ../../_static/brake_surface_temperature.png
   :align: center
   :alt: Brake Surface Temperature Contour

.. GENERATED FROM PYTHON SOURCE LINES 347-348

Brake Surface Temperature

.. GENERATED FROM PYTHON SOURCE LINES 350-352

Post processing with Matplotlib (2D graph)
===============================================

.. GENERATED FROM PYTHON SOURCE LINES 354-356

Read monitor file
-----------------

.. GENERATED FROM PYTHON SOURCE LINES 356-370

.. code-block:: default


    X = []
    Y = []
    Z = []
    i = -1
    with open(report_file_path, "r") as datafile:
        plotting = csv.reader(datafile, delimiter=" ")
        for rows in plotting:
            i = i + 1
            if i > 2:
                X.append(float(rows[3]))
                Y.append(float(rows[2]))
                Z.append(float(rows[1]))


.. GENERATED FROM PYTHON SOURCE LINES 371-373

Plot graph
----------

.. GENERATED FROM PYTHON SOURCE LINES 373-382

.. code-block:: default



    plt.title("Maximum Temperature", fontdict={"color": "darkred", "size": 20})
    plt.plot(X, Z, label="Max. Pad Temperature", color="red")
    plt.plot(X, Y, label="Max. Disc Temperature", color="blue")
    plt.xlabel("Time (sec)")
    plt.ylabel("Max Temperature (K)")
    plt.legend(loc="lower right", shadow=True, fontsize="x-large")


.. GENERATED FROM PYTHON SOURCE LINES 383-385

Show graph
----------

.. GENERATED FROM PYTHON SOURCE LINES 385-388

.. code-block:: default


    plt.show()


.. GENERATED FROM PYTHON SOURCE LINES 389-392

.. image:: ../../_static/brake_maximum_temperature.png
   :align: center
   :alt: Brake Maximum Temperature

.. GENERATED FROM PYTHON SOURCE LINES 394-395

Brake Maximum Temperature

.. GENERATED FROM PYTHON SOURCE LINES 397-399

Close the session
==================================================================================

.. GENERATED FROM PYTHON SOURCE LINES 399-402

.. code-block:: default

    session.exit()

    # sphinx_gallery_thumbnail_path = '_static/brake_surface_temperature-thumbnail.png'


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.000 seconds)


.. _sphx_glr_download_examples_00-released_examples_01-brake.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 01-brake.py <01-brake.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 01-brake.ipynb <01-brake.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
